import { Packet } from './packet.js';
class TransmitterClass {
    constructor() {
        this.encode = true;
        this.packets = {};
    }
    addPacket(room, obj) {
        const { id } = room;
        if (!id)
            return;
        if (!this.packets[id])
            this.packets[id] = [];
        this.packets[id].push(new Packet(obj, id));
    }
    forEach(cb) {
        for (let roomId in this.packets) {
            cb(this.packets[roomId], roomId);
        }
    }
    getPackets(room) {
        if (!room.id)
            return;
        return this.packets[room.id];
    }
    clear(room) {
        if (room && room.id) {
            this.packets[room.id] = [];
        }
        else {
            this.packets = {};
        }
    }
    emit(user, packet, room) {
        const send = (packet) => {
            const lastFramePositions = user['_lastFramePositions'];
            let pos;
            let lastFrame;
            if (lastFramePositions) {
                pos = lastFramePositions.position;
                lastFrame = lastFramePositions.frame;
            }
            const data = { frame: lastFrame, pos };
            user._socket.emit('w', this.encode ? packet.encode(data) : packet.message(data));
        };
        if (room.filterEmit) {
            const objectPacket = room.filterEmit(user, packet);
            const promiseObjectPacket = objectPacket;
            if (promiseObjectPacket.then) {
                promiseObjectPacket.then(send);
            }
            else {
                send(objectPacket);
            }
            return;
        }
        send(packet);
    }
}
export const Transmitter = new TransmitterClass();
//# sourceMappingURL=transmitter.js.map