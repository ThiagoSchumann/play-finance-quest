import { MockIo, Utils } from "@rpgjs/common";
import { entryPoint as entryPoint$1 } from "@rpgjs/server";
import { entryPoint as entryPoint$2 } from "@rpgjs/client";
const {
  ClientIo,
  serverIo
} = MockIo;
function entryPoint(modules, options = {}) {
  const io = new ClientIo();
  class StandaloneGame {
    async start() {
      this.server = await entryPoint$1(modules, {
        io: serverIo,
        standalone: true,
        basePath: "",
        globalConfig: options.globalConfigServer,
        ...options
      });
      this.client = entryPoint$2(modules, {
        standalone: true,
        io,
        globalConfig: options.globalConfigClient,
        ...options
      });
      await this.server.start();
      await this.client.start();
      return this;
    }
    setHooks(hooks, side) {
      if (!Utils.isArray(hooks))
        modules.push({
          [side]: hooks
        });
      else
        modules.concat(hooks.map((hook) => {
          return {
            [side]: hook
          };
        }));
    }
    logicHooks(serverHooks) {
      this.setHooks(serverHooks, "server");
    }
    renderHooks(clientHooks) {
      this.setHooks(clientHooks, "client");
    }
  }
  return new StandaloneGame();
}
export {
  entryPoint
};
