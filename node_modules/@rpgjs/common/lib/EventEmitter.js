import { isPromise } from './Utils.js';
export class EventEmitter {
    constructor() {
        this.listeners = {};
        this.listenersOnce = {};
    }
    has(name) {
        return !!this.listeners[name] || !!this.listenersOnce[name];
    }
    once(name, cb) {
        this.listenersOnce[name] = cb;
        return this;
    }
    on(name, cb) {
        if (!this.listeners[name])
            this.listeners[name] = [];
        this.listeners[name].push(cb);
        return this;
    }
    emit(name, data, rest = false) {
        const ret = [];
        if (this.listeners[name]) {
            for (let listener of this.listeners[name]) {
                if (rest)
                    ret.push(listener(...data));
                else
                    ret.push(listener(data));
            }
        }
        else if (this.listenersOnce[name]) {
            if (rest)
                ret.push(this.listenersOnce[name](...data));
            else
                ret.push(this.listenersOnce[name](data));
        }
        return Promise.all(ret.map(val => {
            if (!isPromise(val)) {
                return Promise.resolve(val);
            }
            return val;
        }));
    }
    off(name) {
        delete this.listeners[name];
        delete this.listenersOnce[name];
    }
    clear() {
        this.listeners = {};
        this.listenersOnce = {};
    }
}
//# sourceMappingURL=EventEmitter.js.map